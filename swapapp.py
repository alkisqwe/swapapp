# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import subprocess
import os
import sys
import time
import threading
from pathvalidate import *
from pyfstab import Fstab

stop = False
kill = False

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(684, 287)
        self.objects = []
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.buttoncreate = QtWidgets.QPushButton(self.centralwidget)
        self.buttoncreate.setObjectName("buttoncreate")
        self.buttoncreate.clicked.connect(lambda: self.create())
        self.horizontalLayout_3.addWidget(self.buttoncreate)
        self.verticalLayout_2.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_2.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        spacerItem = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem)
        self.horizontalLayout_4.addWidget(self.label_5)
        spacerItem1 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        self.horizontalLayout_2.addLayout(self.horizontalLayout_4)
        self.verticalLayout_2.addLayout(self.horizontalLayout_2)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 662, 182))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.buttonlist = QtWidgets.QVBoxLayout()
        self.buttonlist.setObjectName("buttonlist")
        self.verticalLayout_13.addLayout(self.buttonlist)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_2.addWidget(self.scrollArea)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 684, 24))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.refreshmenu = QtWidgets.QAction(MainWindow)
        self.refreshmenu.setObjectName("refreshmenu")
        self.refreshmenu.triggered.connect(lambda: self.refreshtotal(self.buttonlist))
        self.createswaper = QtWidgets.QAction(MainWindow)
        self.createswaper.setObjectName("createswaper")
        self.createswaper.triggered.connect(lambda: self.create())
        self.optioner = QtWidgets.QAction(MainWindow)
        self.optioner.setObjectName("optioner")
        self.optioner.triggered.connect(lambda: self.createoptions())
        self.rebooter = QtWidgets.QAction(MainWindow)
        self.rebooter.setObjectName("rebooter")
        self.rebooter.triggered.connect(lambda: self.reboote())
        self.menufile.addAction(self.refreshmenu)
        self.menufile.addAction(self.createswaper)
        self.menufile.addAction(self.optioner)
        self.menufile.addAction(self.rebooter)
        self.menubar.addAction(self.menufile.menuAction())
        self.createlist()
        self.refreshfstab(self.buttonlist)
        self.refreshprefix(self.buttonlist)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.buttoncreate.setText(_translate("MainWindow", "Create Swap"))
        self.label_3.setText(_translate("MainWindow", "Filename"))
        self.label_2.setText(_translate("MainWindow", "Size"))
        self.label.setText(_translate("MainWindow", "Priority"))
        self.label_5.setText(_translate("MainWindow", "Actions"))
        self.menufile.setTitle(_translate("MainWindow", "file"))
        self.refreshmenu.setText(_translate("MainWindow", "refresh"))
        self.createswaper.setText(_translate("MainWindow", "create swap"))
        self.optioner.setText(_translate("MainWindow", "options"))
        self.rebooter.setText(_translate("MainWindow", "reboot"))
        
    def createlist(self):
        #swapfiles = os.listdir("/mnt/swap/")
        result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
        gr = str(result.stdout.decode('utf-8'))
        grrr = gr.split("\n")
        grr = []
        for i in range(0,len(grrr)):
            grr.append(grrr[i].split(" "))
        qwe = []
        for grrrf in grr:
            for grrrff in grrrf:
                if(grrrff.strip() != ""):
                    qwe.append(grrrff.strip())
        i = 0
        for ii in range(0,len(qwe)):
            i += 1
            if(i == 6):
                i = 1
            if(i == 5):
                if(qwe[ii-3] == "file"):
                    self.bform = QtWidgets.QWidget()
                    self.bui = Ui_Form()
                    self.bui.setupUi(self.bform,qwe[ii-4],qwe[ii-2],self.buttonlist,qwe[ii])
                    self.buttonlist.addWidget(self.bform)
                    self.objects.append(qwe[ii-4])
        
    def create(self):
        self.createdialog = QtWidgets.QDialog()
        self.createui = Ui_Dialog2()
        self.createui.setupUi(self.createdialog,self.buttonlist)
        self.createdialog.setWindowTitle("Create Swap")
        self.createdialog.show()
        
    def createoptions(self):
        self.optionsdialog = QtWidgets.QDialog()
        self.optionsui = Ui_Dialog()
        file1 = open('settings.cfg', 'r')
        Lines = file1.readlines()
        self.optionsui.setupUi(self.optionsdialog,Lines[0])
        file1.close()
        self.optionsdialog.setWindowTitle("Options")
        self.optionsdialog.show()
        
    def refreshtotal(self,layouterr):
        self.refresh(layouterr)
        self.refreshfstab(layouterr)
        self.refreshprefix(layouterr)
        
    def refreshfstab(self,layouterr):
        ff = open("/etc/fstab", "r")
        fstab = Fstab().read_file(ff)
        for entry in fstab.entries_by_type["swap"]:
            if(str(entry.device) not in self.objects):
                self.bform = QtWidgets.QWidget()
                self.bui = Ui_Form()
                sizeq = os.stat(str(entry.device)).st_size / (1024 * 1024)
                self.bui.setupUi(self.bform,str(entry.device),str(sizeq)+"M",layouterr,"Null")
                layouterr.addWidget(self.bform)
                self.objects.append(str(entry.device))
        ff.close()
        
    def refreshprefix(self,layouterr):
        refreshprefixer = os.listdir(prefix)
        for refreshprefixerr in refreshprefixer:
            if(prefix+refreshprefixerr not in self.objects):
                if(os.path.isfile(prefix+refreshprefixerr)):
                    try:
                        f = open(prefix+refreshprefixerr,"r")
                        f.seek(4086)
                        q = f.read(9)
                        if(q.strip() == "SWAPSPACE"):
                            self.bform = QtWidgets.QWidget()
                            self.bui = Ui_Form()
                            sizeq = os.stat(prefix+refreshprefixerr).st_size / (1024 * 1024)
                            self.bui.setupUi(self.bform,prefix+refreshprefixerr,str(sizeq)+"M",layouterr,"Null")
                            layouterr.addWidget(self.bform)
                            self.objects.append(prefix+refreshprefixerr)
                        f.close()
                    except Exception as err:
                        non = 0

        
    def refresh(self,layouterr):
        for i in reversed(range(layouterr.count())):
            item = layouterr.itemAt(i)
            item.widget().deleteLater()
        result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
        gr = str(result.stdout.decode('utf-8'))
        grrr = gr.split("\n")
        grr = []
        for i in range(0,len(grrr)):
            grr.append(grrr[i].split(" "))
        qwe = []
        for grrrf in grr:
            for grrrff in grrrf:
                if(grrrff.strip() != ""):
                    qwe.append(grrrff.strip())
        i = 0
        for ii in range(0,len(qwe)):
            i += 1
            if(i == 6):
                i = 1
            if(i == 5):
                if(qwe[ii-3] == "file"):
                    self.bform = QtWidgets.QWidget()
                    self.bui = Ui_Form()
                    self.bui.setupUi(self.bform,qwe[ii-4],qwe[ii-2],layouterr,qwe[ii])
                    layouterr.addWidget(self.bform)
                    self.objects.append(qwe[ii-4])
                    
    def reboote(self):
        os.system("reboot")
        
class Ui_Dialog3(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 100)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setMinimum(0)
        self.progressBar.setMaximum(0)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setInvertedAppearance(True)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_2.addWidget(self.progressBar)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        Dialog.setWindowFlags(
            QtCore.Qt.FramelessWindowHint |
            QtCore.Qt.WindowStaysOnTopHint |
            QtCore.Qt.Tool
        )
        Dialog.setModal(True)
        Dialog.setWindowModality(QtCore.Qt.ApplicationModal)
        Dialog.show()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self._want_to_close = False
        
class Ui_Dialog2(object):
    def setupUi(self, Dialog,layout):
        Dialog.setObjectName("Dialog")
        Dialog.resize(300, 165)
        self.objects = []
        self.layouter = layout
        self.Dialogref = Dialog
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(Dialog)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.filenameredit = QtWidgets.QLineEdit(Dialog)
        self.filenameredit.setObjectName("filenameredit")
        self.verticalLayout_2.addWidget(self.filenameredit)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.sizeredit = QtWidgets.QLineEdit(Dialog)
        self.sizeredit.setObjectName("sizeredit")
        self.sizeredit.setValidator(QtGui.QIntValidator())
        self.verticalLayout_2.addWidget(self.sizeredit)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.priorityedit = QtWidgets.QLineEdit(Dialog)
        self.priorityedit.setObjectName("priorityedit")
        self.priorityedit.setValidator(QtGui.QIntValidator())
        self.verticalLayout_2.addWidget(self.priorityedit)
        self.dialogok = QtWidgets.QDialogButtonBox(Dialog)
        self.dialogok.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.dialogok.setObjectName("dialogok")
        self.dialogok.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(lambda: self.accept())
        self.dialogok.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(lambda: self.decline())
        self.verticalLayout_2.addWidget(self.dialogok)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "filename"))
        self.label_2.setText(_translate("Dialog", "size(mb)"))
        self.label_3.setText(_translate("Dialog", "priority(-2=auto)"))
        self.priorityedit.setText("-2")
        self.comboBox.setItemText(0, _translate("Dialog", "Permenant"))
        self.comboBox.setItemText(1, _translate("Dialog", "Temporary (Until Reboot)"))
        
    def accept(self):
        self.loaddialog = QtWidgets.QDialog()
        self.loadui = Ui_Dialog3()
        self.loadui.setupUi(self.loaddialog)
        self.loaddialog.show()
        thread1 = createthread(self.filenameredit.text(),self.sizeredit.text(),self.filenameredit,self.sizeredit,self.priorityedit.text(),self.comboBox.currentText())
        thread1.signaller.finished.connect(self.on_finished)
        thread1.signaller.started.connect(self.on_started)
        thread1.start()

    def decline(self):
        self.Dialogref.close()
        
    def on_started(self):
        self.loaddialog.close()
        
    def on_finished(self):
        self.loaddialog.close()
        self.refresh(self.layouter)
        self.refreshfstab(self.layouter)
        self.refreshprefix(self.layouter)
        self.Dialogref.close()
        
    def refreshfstab(self,layouterr):
        ff = open("/etc/fstab", "r")
        fstab = Fstab().read_file(ff)
        for entry in fstab.entries_by_type["swap"]:
            if(str(entry.device) not in self.objects):
                self.bform = QtWidgets.QWidget()
                self.bui = Ui_Form()
                sizeq = os.stat(str(entry.device)).st_size / (1024 * 1024)
                self.bui.setupUi(self.bform,str(entry.device),str(sizeq)+"M",layouterr,"Null")
                layouterr.addWidget(self.bform)
                self.objects.append(str(entry.device))
        ff.close()
        
    def refreshprefix(self,layouterr):
        refreshprefixer = os.listdir(prefix)
        for refreshprefixerr in refreshprefixer:
            if(prefix+refreshprefixerr not in self.objects):
                if(os.path.isfile(prefix+refreshprefixerr)):
                    try:
                        f = open(prefix+refreshprefixerr,"r")
                        f.seek(4086)
                        q = f.read(9)
                        if(q.strip() == "SWAPSPACE"):
                            self.bform = QtWidgets.QWidget()
                            self.bui = Ui_Form()
                            sizeq = os.stat(prefix+refreshprefixerr).st_size / (1024 * 1024)
                            self.bui.setupUi(self.bform,prefix+refreshprefixerr,str(sizeq)+"M",layouterr,"Null")
                            layouterr.addWidget(self.bform)
                            self.objects.append(prefix+refreshprefixerr)
                        f.close()
                    except Exception as err:
                        non = 0
        
    def refresh(self,layouterr):
        for i in reversed(range(layouterr.count())):
            item = layouterr.itemAt(i)
            item.widget().deleteLater()
        result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
        gr = str(result.stdout.decode('utf-8'))
        grrr = gr.split("\n")
        grr = []
        for i in range(0,len(grrr)):
            grr.append(grrr[i].split(" "))
        qwe = []
        for grrrf in grr:
            for grrrff in grrrf:
                if(grrrff.strip() != ""):
                    qwe.append(grrrff.strip())
        i = 0
        for ii in range(0,len(qwe)):
            i += 1
            if(i == 6):
                i = 1
            if(i == 5):
                if(qwe[ii-3] == "file"):
                    self.bform = QtWidgets.QWidget()
                    self.bui = Ui_Form()
                    self.bui.setupUi(self.bform,qwe[ii-4],qwe[ii-2],layouterr,qwe[ii])
                    layouterr.addWidget(self.bform)
                    self.objects.append(qwe[ii-4])
        
class Ui_Dialogedit(object):
    def setupUi(self, Dialog,layout,namea,sizea,prioritya):
        Dialog.setObjectName("Dialog")
        Dialog.resize(300, 165)
        self.objects = []
        self.prename = namea
        presizea = int(os.stat(namea).st_size / (1024 * 1024))
        self.presize = str(presizea)
        self.prepriority = prioritya
        file1 = open('/etc/fstab', 'r')
        Lines = file1.readlines()
        self.okier = 0
        for line in Lines:
            if(self.prename in line):
                self.okier = 1
        self.layouter = layout
        self.Dialogref = Dialog
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(Dialog)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.comboBox = QtWidgets.QComboBox(Dialog)
        self.comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.verticalLayout_2.addWidget(self.comboBox)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.verticalLayout_2.addWidget(self.label)
        self.filenameredit = QtWidgets.QLineEdit(Dialog)
        self.filenameredit.setObjectName("filenameredit")
        self.filenameredit.setText(namea)
        self.verticalLayout_2.addWidget(self.filenameredit)
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.sizeredit = QtWidgets.QLineEdit(Dialog)
        self.sizeredit.setObjectName("sizeredit")
        self.sizeredit.setValidator(QtGui.QIntValidator())
        self.sizeredit.setText(str(presizea))
        self.verticalLayout_2.addWidget(self.sizeredit)
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_2.addWidget(self.label_3)
        self.priorityedit = QtWidgets.QLineEdit(Dialog)
        self.priorityedit.setObjectName("priorityedit")
        self.priorityedit.setValidator(QtGui.QIntValidator())
        self.priorityedit.setText(prioritya)
        self.verticalLayout_2.addWidget(self.priorityedit)
        self.dialogok = QtWidgets.QDialogButtonBox(Dialog)
        self.dialogok.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.dialogok.setObjectName("dialogok")
        self.dialogok.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(lambda: self.accept())
        self.dialogok.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(lambda: self.decline())
        self.verticalLayout_2.addWidget(self.dialogok)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "filename"))
        self.label_2.setText(_translate("Dialog", "size(mb)"))
        self.label_3.setText(_translate("Dialog", "priority(-2=auto)"))
        self.comboBox.setItemText(0, _translate("Dialog", "Permenant"))
        self.comboBox.setItemText(1, _translate("Dialog", "Temporary (Until Reboot)"))
        if(self.okier == 1):
            self.comboBox.setCurrentIndex(0);
        elif(self.okier == 0):
            self.comboBox.setCurrentIndex(1);
        
    def accept(self):
        self.loaddialog = QtWidgets.QDialog()
        self.loadui = Ui_Dialog3()
        self.loadui.setupUi(self.loaddialog)
        self.loaddialog.show()
        thread1 = editthread(self.filenameredit.text(),self.sizeredit.text(),self.filenameredit,self.sizeredit,self.priorityedit.text(),self.comboBox.currentText(),self.prename,self.presize,self.prepriority,self.okier)
        thread1.signaller.finished.connect(self.on_finished)
        thread1.signaller.started.connect(self.on_started)
        thread1.start()

    def decline(self):
        self.Dialogref.close()
        
    def on_started(self):
        self.loaddialog.close()
        
    def on_finished(self):
        self.loaddialog.close()
        self.refresh(self.layouter)
        self.refreshfstab(self.layouter)
        self.refreshprefix(self.layouter)
        self.Dialogref.close()
        
    def refreshfstab(self,layouterr):
        ff = open("/etc/fstab", "r")
        fstab = Fstab().read_file(ff)
        for entry in fstab.entries_by_type["swap"]:
            if(str(entry.device) not in self.objects):
                self.bform = QtWidgets.QWidget()
                self.bui = Ui_Form()
                sizeq = os.stat(str(entry.device)).st_size / (1024 * 1024)
                self.bui.setupUi(self.bform,str(entry.device),str(sizeq)+"M",layouterr,"Null")
                layouterr.addWidget(self.bform)
                self.objects.append(str(entry.device))
        ff.close()
        
    def refreshprefix(self,layouterr):
        refreshprefixer = os.listdir(prefix)
        for refreshprefixerr in refreshprefixer:
            if(prefix+refreshprefixerr not in self.objects):
                if(os.path.isfile(prefix+refreshprefixerr)):
                    try:
                        f = open(prefix+refreshprefixerr,"r")
                        f.seek(4086)
                        q = f.read(9)
                        if(q.strip() == "SWAPSPACE"):
                            self.bform = QtWidgets.QWidget()
                            self.bui = Ui_Form()
                            sizeq = os.stat(prefix+refreshprefixerr).st_size / (1024 * 1024)
                            self.bui.setupUi(self.bform,prefix+refreshprefixerr,str(sizeq)+"M",layouterr,"Null")
                            layouterr.addWidget(self.bform)
                            self.objects.append(prefix+refreshprefixerr)
                        f.close()
                    except Exception as err:
                        non = 0
                        
    def refresh(self,layouterr):
        for i in reversed(range(layouterr.count())):
            item = layouterr.itemAt(i)
            item.widget().deleteLater()
        result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
        gr = str(result.stdout.decode('utf-8'))
        grrr = gr.split("\n")
        grr = []
        for i in range(0,len(grrr)):
            grr.append(grrr[i].split(" "))
        qwe = []
        for grrrf in grr:
            for grrrff in grrrf:
                if(grrrff.strip() != ""):
                    qwe.append(grrrff.strip())
        i = 0
        for ii in range(0,len(qwe)):
            i += 1
            if(i == 6):
                i = 1
            if(i == 5):
                if(qwe[ii-3] == "file"):
                    self.bform = QtWidgets.QWidget()
                    self.bui = Ui_Form()
                    self.bui.setupUi(self.bform,qwe[ii-4],qwe[ii-2],layouterr,qwe[ii])
                    layouterr.addWidget(self.bform)
                    self.objects.append(qwe[ii-4])
                    
class editthread(threading.Thread):
    def __init__(self,namett,sizett,filenameeditor,sizeeditor,priorityy,option,prename,presize,prepriority,preoption):
        threading.Thread.__init__(self)
        self.filenameredit = namett
        self.sizeredit = sizett
        self.signaller = Signaller()
        self.filenameeditorr = filenameeditor
        self.sizeeditorr = sizeeditor
        self.priority = priorityy
        self.optionn = option
        if(namett != prename) and (namett != prename[len(prefix):len(prename)]):
            self.one = 1
        else:
            self.one = 0
        if(sizett != presize):
            self.two = 1
        else:
            self.two = 0
        if(priorityy != prepriority):
            self.three = 1
        else:
            self.three = 0
        if(option.startswith("Permenant")) and (preoption == 1):
            self.four = 0
        elif(option.startswith("Permenant")) and (preoption == 0):
            self.four = 1
        elif(option.startswith("Temporary")) and (preoption == 0):
            self.four = 0
        elif(option.startswith("Temporary")) and (preoption == 1):
            self.four = 1
        self.prenamee = prename
        self.presizee = presize
        self.preprioritye = prepriority

    def run(self):
        self.filename = self.filenameredit
        self.size = self.sizeredit
        self.name = self.filename
        if(prefix in self.name):
            self.name = self.name[len(prefix):len(self.name)]
        if(self.one == 1):
            if("/" in self.name) or ("&&" in self.name) or ("|" in self.name) or ("||" in self.name) or ("\0" in self.name) or ("\\" in self.name) or (self.name.startswith("#")) or (self.name.startswith("%")) or (self.name.startswith("&")) or (self.name.startswith("{")) or (self.name.startswith("}")) or (self.name.startswith("<")) or (self.name.startswith(">")) or (self.name.startswith("*")) or (self.name.startswith("?")) or (self.name.startswith(" ")) or (self.name.startswith("-")) or (self.name == ""):
                self.filenameeditorr.setText("")
                self.filenameeditorr.setPlaceholderText("Incorect Folder Or Wrong Filename")
                self.signaller.started.emit()
            else:
                if(os.path.exists(prefix+self.name)):
                    self.filenameeditorr.setText("")
                    self.filenameeditorr.setPlaceholderText("File Already Exist")
                    self.signaller.started.emit()
                else:
                    if(self.two == 1):
                        checker = 0
                        try:
                            checker = float(self.size)
                        except ValueError:
                            checker = 0
                        try:
                            checker = int(self.size)
                        except ValueError:
                            checker = 0
                        if((isinstance(checker, int)) or (isinstance(checker, float))) and checker != 0:
                            calculatorvalue = os.statvfs(prefix)
                            calculator1 = calculatorvalue.f_frsize * calculatorvalue.f_bavail
                            calculator2 = calculator1/1024
                            calculator3 = calculator2/1024
                            if(calculator3 < float(self.size)) and (self.size > self.presizee):
                                self.sizeeditorr.setText("")
                                self.sizeeditorr.setPlaceholderText("Not Enough Free Space")
                                self.signaller.started.emit()
                            else:
                                if(self.priority == -2):
                                    if(self.optionn.startswith("Permenant")):
                                        self.sizer = 1024 * int(self.size)
                                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                        os.system("mv "+self.prenamee+" "+prefix+self.name)
                                        subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                        subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                        os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                                        self.signaller.finished.emit()
                                    else:
                                        self.sizer = 1024 * int(self.size)
                                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                        os.system("mv "+self.prenamee+" "+prefix+self.name)
                                        subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                        subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                        self.signaller.finished.emit()
                                else:
                                    if(self.optionn.startswith("Permenant")):
                                        self.sizer = 1024 * int(self.size)
                                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                        os.system("mv "+self.prenamee+" "+prefix+self.name)
                                        subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                        subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                        os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                                        self.signaller.finished.emit()
                                    else:
                                        self.sizer = 1024 * int(self.size)
                                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                        os.system("mv "+self.prenamee+" "+prefix+self.name)
                                        subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                        subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                        self.signaller.finished.emit() 
                        else:
                            self.sizeeditorr.setText("")
                            self.sizeeditorr.setPlaceholderText("Please Enter a Correct Size For Swap")
                            self.signaller.started.emit()
                    else:
                        if(self.priority == -2):
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                os.system("mv "+self.prenamee+" "+prefix+self.name)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                os.system("mv "+self.prenamee+" "+prefix+self.name)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit()
                        else:
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                os.system("mv "+self.prenamee+" "+prefix+self.name)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                os.system("mv "+self.prenamee+" "+prefix+self.name)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit()
        elif(self.two == 1):
            if("/" in self.name) or ("&&" in self.name) or ("|" in self.name) or ("||" in self.name) or ("\0" in self.name) or ("\\" in self.name) or (self.name.startswith("#")) or (self.name.startswith("%")) or (self.name.startswith("&")) or (self.name.startswith("{")) or (self.name.startswith("}")) or (self.name.startswith("<")) or (self.name.startswith(">")) or (self.name.startswith("*")) or (self.name.startswith("?")) or (self.name.startswith(" ")) or (self.name.startswith("-")) or (self.name == ""):
                self.filenameeditorr.setText("")
                self.filenameeditorr.setPlaceholderText("Please Enter a Correct File Name")
                self.signaller.started.emit()
            else:
                checker = 0
                try:
                    checker = float(self.size)
                except ValueError:
                    checker = 0
                try:
                    checker = int(self.size)
                except ValueError:
                    checker = 0
                if((isinstance(checker, int)) or (isinstance(checker, float))) and checker != 0:
                    calculatorvalue = os.statvfs(prefix)
                    calculator1 = calculatorvalue.f_frsize * calculatorvalue.f_bavail
                    calculator2 = calculator1/1024
                    calculator3 = calculator2/1024
                    if(calculator3 < float(self.size)) and (self.size > self.presizee):
                        self.sizeeditorr.setText("")
                        self.sizeeditorr.setPlaceholderText("Not Enough Free Space")
                        self.signaller.started.emit()
                    else:
                        if(self.priority == -2):
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit()
                        else:
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                                os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit() 
                else:
                    self.sizeeditorr.setText("")
                    self.sizeeditorr.setPlaceholderText("Please Enter a Correct Size For Swap")
                    self.signaller.started.emit()
        elif(self.three == 1):
            if("/" in self.name) or ("&&" in self.name) or ("|" in self.name) or ("||" in self.name) or ("\0" in self.name) or ("\\" in self.name) or (self.name.startswith("#")) or (self.name.startswith("%")) or (self.name.startswith("&")) or (self.name.startswith("{")) or (self.name.startswith("}")) or (self.name.startswith("<")) or (self.name.startswith(">")) or (self.name.startswith("*")) or (self.name.startswith("?")) or (self.name.startswith(" ")) or (self.name.startswith("-")) or (self.name == ""):
                self.filenameeditorr.setText("")
                self.filenameeditorr.setPlaceholderText("Please Enter a Correct File Name")
                self.signaller.started.emit()
            else:
                if(self.priority == -2):
                    if(self.optionn.startswith("Permenant")):
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                        os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                        self.signaller.finished.emit()
                    else:
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                        self.signaller.finished.emit()
                else:
                    if(self.optionn.startswith("Permenant")):
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                        os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                        self.signaller.finished.emit()
                    else:
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                        self.signaller.finished.emit()
        elif(self.four == 1):
            if("/" in self.name) or ("&&" in self.name) or ("|" in self.name) or ("||" in self.name) or ("\0" in self.name) or ("\\" in self.name) or (self.name.startswith("#")) or (self.name.startswith("%")) or (self.name.startswith("&")) or (self.name.startswith("{")) or (self.name.startswith("}")) or (self.name.startswith("<")) or (self.name.startswith(">")) or (self.name.startswith("*")) or (self.name.startswith("?")) or (self.name.startswith(" ")) or (self.name.startswith("-")) or (self.name == ""):
                self.filenameeditorr.setText("")
                self.filenameeditorr.setPlaceholderText("Please Enter a Correct File Name")
                self.signaller.started.emit()
            else:
                if(self.priority == -2):
                    if(self.optionn.startswith("Permenant")):
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                        os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                        self.signaller.finished.emit()
                    else:
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                        self.signaller.finished.emit()
                else:
                    if(self.optionn.startswith("Permenant")):
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                        os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                        self.signaller.finished.emit()
                    else:
                        self.sizer = 1024 * int(self.size)
                        subprocess.run(['swapoff', self.prenamee], stdout=subprocess.PIPE)
                        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                        os.system('sed -i '+"'/"+self.prenamee.replace("/","\/")+"/d'"+' /etc/fstab')
                        subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                        self.signaller.finished.emit()
        else:
            self.signaller.finished.emit()

class Ui_Dialog(object):
    def setupUi(self, Dialog,value):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 111)
        self.valuee = value
        self.Dialoger = Dialog
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.nsfl = QtWidgets.QLineEdit(Dialog)
        self.nsfl.setObjectName("nsfl")
        self.nsfl.setText(self.valuee)
        self.verticalLayout.addWidget(self.nsfl)
        self.optionsok = QtWidgets.QDialogButtonBox(Dialog)
        self.optionsok.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.optionsok.setObjectName("optionsok")
        self.optionsok.button(QtWidgets.QDialogButtonBox.Ok).clicked.connect(lambda: self.accept())
        self.optionsok.button(QtWidgets.QDialogButtonBox.Cancel).clicked.connect(lambda: self.decline())
        self.verticalLayout.addWidget(self.optionsok)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "New Swap Files Location"))
        
    def accept(self):
        newprefix = self.nsfl.text()
        self.editingconfig(newprefix)

    def decline(self):
        self.Dialoger.close()
        
    def editingconfig(self,editedline):
        global prefix
        if(os.path.exists("settings.cfg")):
            os.remove("settings.cfg")
            if(editedline.startswith("/") or editedline.startswith("~")) and is_valid_filepath(editedline.strip(),"Linux"):
                if(os.path.isdir(editedline.strip())):
                    if(editedline.strip()[len(editedline.strip())-1] == "/"):
                        prefix = editedline.strip()
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip())
                        file2.close()
                        self.Dialoger.close()
                    else:
                        prefix = editedline.strip()+"/"
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip()+"/")
                        file2.close()
                        self.Dialoger.close()
                else:
                    if(editedline.strip()[len(editedline.strip())-1] == "/"):
                        prefix = editedline.strip()
                        os.mkdir(editedline.strip())
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip())
                        file2.close()
                        self.Dialoger.close()
                    else:
                        prefix = editedline.strip()+"/"
                        os.mkdir(editedline.strip()+"/")
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip()+"/")
                        file2.close()
                        self.Dialoger.close()
            else:
                self.nsfl.setText("")
                self.nsfl.setPlaceholderText("Please Enter a Correct Folder Name")
        else:
            if(editedline.startswith("/") or editedline.startswith("~")) and is_valid_filepath(editedline.strip(),"Linux"):
                if(os.path.isdir(editedline.strip())):
                    if(editedline.strip()[len(editedline.strip())-1] == "/"):
                        prefix = editedline.strip()
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip())
                        file2.close()
                        self.Dialoger.close()
                    else:
                        prefix = editedline.strip()+"/"
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip()+"/")
                        file2.close()
                        self.Dialoger.close()
                else:
                    if(editedline.strip()[len(editedline.strip())-1] == "/"):
                        prefix = editedline.strip()
                        os.mkdir(editedline.strip())
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip())
                        file2.close()
                        self.Dialoger.close()
                    else:
                        prefix = editedline.strip()+"/"
                        os.mkdir(editedline.strip()+"/")
                        file2 = open('settings.cfg', 'w')
                        file2.writelines(editedline.strip()+"/")
                        file2.close()
                        self.Dialoger.close()
            else:
                self.nsfl.setText("")
                self.nsfl.setPlaceholderText("Please Enter a Correct Folder Name")
                
class Ui_Form(object):
    def setupUi(self, Form, namea, sizea, layout,priority):
        Form.setObjectName("Form")
        Form.resize(700, 100)
        self.objects = []
        if(priority == "Null"):
            self.one = 1
        else:
            self.one = 0
        self.layouter = layout
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(Form)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.filename = QtWidgets.QLabel(Form)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.filename.sizePolicy().hasHeightForWidth())
        self.filename.setSizePolicy(sizePolicy)
        self.filename.setObjectName("filename")
        self.filename.setText(namea)
        self.horizontalLayout.addWidget(self.filename)
        self.sizew = QtWidgets.QLabel(Form)
        self.sizew.setSizePolicy(sizePolicy)
        self.sizew.setObjectName("sizew")
        self.sizew.setText(sizea)
        self.horizontalLayout.addWidget(self.sizew)
        self.priorityw = QtWidgets.QLabel(Form)
        self.priorityw.setSizePolicy(sizePolicy)
        self.priorityw.setObjectName("priorityw")
        self.priorityw.setText(priority)
        self.horizontalLayout.addWidget(self.priorityw)
        self.horizontalLayoutbuttons = QtWidgets.QHBoxLayout()
        self.horizontalLayoutbuttons.setObjectName("horizontalLayoutbuttons")
        self.horizontalLayout.addLayout(self.horizontalLayoutbuttons)
        self.editer = QtWidgets.QPushButton(Form)
        self.editer.clicked.connect(lambda: self.edit(namea))
        self.editer.setSizePolicy(sizePolicy)
        self.editer.setObjectName("editer")
        self.horizontalLayoutbuttons.addWidget(self.editer)
        self.disabler = QtWidgets.QPushButton(Form)
        self.disabler.clicked.connect(lambda: self.disable(namea))
        self.disabler.setSizePolicy(sizePolicy)
        self.disabler.setObjectName("disabler")
        self.horizontalLayoutbuttons.addWidget(self.disabler)
        self.deleter = QtWidgets.QPushButton(Form)
        self.deleter.clicked.connect(lambda: self.delete(namea))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.deleter.sizePolicy().hasHeightForWidth())
        self.deleter.setSizePolicy(sizePolicy)
        self.deleter.setObjectName("deleter")
        self.horizontalLayoutbuttons.addWidget(self.deleter)
        self.horizontalLayout_2.addLayout(self.horizontalLayout)
        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.deleter.setText(_translate("Form", "Delete"))
        if(self.one == 1):
            self.disabler.setText(_translate("Form", "Enable"))
        else:
            self.disabler.setText(_translate("Form", "Disable"))
        self.editer.setText(_translate("Form", "Edit"))
        
    def delete(self,name):
        self.loaddialog = QtWidgets.QDialog()
        self.loadui = Ui_Dialog3()
        self.loadui.setupUi(self.loaddialog)
        self.loaddialog.show()
        subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
        subprocess.run(['rm', name], stdout=subprocess.PIPE)
        subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
        os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
        self.refresh(self.layouter)
        self.refreshfstab(self.layouter)
        self.refreshprefix(self.layouter)
        self.loaddialog.close()
        
    def disable(self,name):
        if(self.one == 1):
            subprocess.run(['swapon', name], stdout=subprocess.PIPE)
            self.refresh(self.layouter)
            self.refreshfstab(self.layouter)
            self.refreshprefix(self.layouter)
        else:
            subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
            self.refresh(self.layouter)
            self.refreshfstab(self.layouter)
            self.refreshprefix(self.layouter)
        
    def edit(self,name):
        self.createdialog = QtWidgets.QDialog()
        self.createui = Ui_Dialogedit()
        self.createui.setupUi(self.createdialog,self.layouter,self.filename.text(),self.sizew.text(),self.priorityw.text())
        self.createdialog.setWindowTitle("Edit Swap")
        self.createdialog.show()
        
    def refreshfstab(self,layouterr):
        ff = open("/etc/fstab", "r")
        fstab = Fstab().read_file(ff)
        for entry in fstab.entries_by_type["swap"]:
            if(str(entry.device) not in self.objects):
                self.bform = QtWidgets.QWidget()
                self.bui = Ui_Form()
                sizeq = os.stat(str(entry.device)).st_size / (1024 * 1024)
                self.bui.setupUi(self.bform,str(entry.device),str(sizeq)+"M",layouterr,"Null")
                layouterr.addWidget(self.bform)
                self.objects.append(str(entry.device))
        ff.close()
        
    def refreshprefix(self,layouterr):
        refreshprefixer = os.listdir(prefix)
        for refreshprefixerr in refreshprefixer:
            if(prefix+refreshprefixerr not in self.objects):
                if(os.path.isfile(prefix+refreshprefixerr)):
                    try:
                        f = open(prefix+refreshprefixerr,"r")
                        f.seek(4086)
                        q = f.read(9)
                        if(q.strip() == "SWAPSPACE"):
                            self.bform = QtWidgets.QWidget()
                            self.bui = Ui_Form()
                            sizeq = os.stat(prefix+refreshprefixerr).st_size / (1024 * 1024)
                            self.bui.setupUi(self.bform,prefix+refreshprefixerr,str(sizeq)+"M",layouterr,"Null")
                            layouterr.addWidget(self.bform)
                            self.objects.append(prefix+refreshprefixerr)
                        f.close()
                    except Exception as err:
                        non = 0
        
    def refresh(self,layouterr):
        for i in reversed(range(layouterr.count())):
            item = layouterr.itemAt(i)
            item.widget().deleteLater()
        result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
        gr = str(result.stdout.decode('utf-8'))
        grrr = gr.split("\n")
        grr = []
        for i in range(0,len(grrr)):
            grr.append(grrr[i].split(" "))
        qwe = []
        for grrrf in grr:
            for grrrff in grrrf:
                if(grrrff.strip() != ""):
                    qwe.append(grrrff.strip())
        i = 0
        for ii in range(0,len(qwe)):
            i += 1
            if(i == 6):
                i = 1
            if(i == 5):
                if(qwe[ii-3] == "file"):
                    self.bform = QtWidgets.QWidget()
                    self.bui = Ui_Form()
                    self.bui.setupUi(self.bform,qwe[ii-4],qwe[ii-2],layouterr,qwe[ii])
                    layouterr.addWidget(self.bform)
                    self.objects.append(qwe[ii-4])
        
        
class createthread(threading.Thread):
    def __init__(self,namett,sizett,filenameeditor,sizeeditor,priorityy,option):
        threading.Thread.__init__(self)
        self.filenameredit = namett
        self.sizeredit = sizett
        self.signaller = Signaller()
        self.filenameeditorr = filenameeditor
        self.sizeeditorr = sizeeditor
        self.priority = priorityy
        self.optionn = option

    def run(self):
        self.filename = self.filenameredit
        self.size = self.sizeredit
        self.name = self.filename
        if("/" in self.name) or ("&&" in self.name) or ("|" in self.name) or ("||" in self.name) or ("\0" in self.name) or ("\\" in self.name) or (self.name.startswith("#")) or (self.name.startswith("%")) or (self.name.startswith("&")) or (self.name.startswith("{")) or (self.name.startswith("}")) or (self.name.startswith("<")) or (self.name.startswith(">")) or (self.name.startswith("*")) or (self.name.startswith("?")) or (self.name.startswith(" ")) or (self.name.startswith("-")) or (self.name == ""):
            self.filenameeditorr.setText("")
            self.filenameeditorr.setPlaceholderText("Please Enter a Correct File Name")
            self.signaller.started.emit()
        else:
            if(os.path.exists(prefix+self.name)):
                self.filenameeditorr.setText("")
                self.filenameeditorr.setPlaceholderText("File Already Exist")
                self.signaller.started.emit()
            else:
                checker = 0
                try:
                    checker = float(self.size)
                except ValueError:
                    checker = 0
                try:
                    checker = int(self.size)
                except ValueError:
                    checker = 0
                if((isinstance(checker, int)) or (isinstance(checker, float))) and checker != 0:
                    calculatorvalue = os.statvfs(prefix)
                    calculator1 = calculatorvalue.f_frsize * calculatorvalue.f_bavail
                    calculator2 = calculator1/1024
                    calculator3 = calculator2/1024
                    if(calculator3 < float(self.size)):
                        self.sizeeditorr.setText("")
                        self.sizeeditorr.setPlaceholderText("Not Enough Free Space")
                        self.signaller.started.emit()
                    else:
                        if(self.priority == -2):
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit()
                        else:
                            if(self.optionn.startswith("Permenant")):
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                os.system('echo '+prefix+self.name+' none swap sw,pri='+self.priority+' 0 0 >> /etc/fstab')
                                self.signaller.finished.emit()
                            else:
                                self.sizer = 1024 * int(self.size)
                                subprocess.run(['dd', 'if=/dev/zero', 'of='+prefix+self.name, 'bs=1024', 'count='+str(self.sizer)], stdout=subprocess.PIPE)
                                subprocess.run(['chown', 'root:root', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['chmod', '0600', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['mkswap', prefix+self.name], stdout=subprocess.PIPE)
                                subprocess.run(['swapon', '-p', self.priority, prefix+self.name], stdout=subprocess.PIPE)
                                self.signaller.finished.emit()
                else:
                    self.sizeeditorr.setText("")
                    self.sizeeditorr.setPlaceholderText("Please Enter a Correct Size For Swap")
                    self.signaller.started.emit()
                
class Signaller(QtCore.QObject):
    started = QtCore.pyqtSignal()
    finished = QtCore.pyqtSignal()
    
class Ui_Dialogerror(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(400, 111)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.label.setText(_translate("Dialog", "Configuration File Error Creating New File"))
        
class progress_bar_loading(threading.Thread):
    def run(self):
        global stop
        global kill
        print('Please Wait...'),sys.stdout.flush()
        i = 0
        while stop != True:
            if (i%4) == 0:
                sys.stdout.write('\b/')
            elif (i%4) == 1:
                sys.stdout.write('\b-')
            elif (i%4) == 2:
                sys.stdout.write('\b\\')
            elif (i%4) == 3:
                sys.stdout.write('\b|')
            sys.stdout.flush()
            time.sleep(0.2)
            i+=1
        if kill == True:
            print('\b\b\b\b ABORT!')
        else:
            print('\b\b\b done!')

def checkingconfig():
    global prefix
    if(os.path.exists("settings.cfg")):
        file1 = open('settings.cfg', 'r')
        Lines = file1.readlines()
        if(len(Lines) == 1):
            if(Lines[0].startswith("/") or Lines[0].startswith("~")) and is_valid_filepath(Lines[0].strip(),"Linux"):
                if(os.path.isdir(Lines[0].strip())):
                    prefix = Lines[0].strip()
                    file1.close()
                else:
                    prefix = Lines[0].strip()
                    os.mkdir(Lines[0].strip())
                    file1.close()
            else:
                file1.close()
                os.remove("settings.cfg")
                file2 = open('settings.cfg', 'w')
                file2.writelines("/mnt/")
                file2.close()
        else:
            file1.close()
            os.remove("settings.cfg")
            file2 = open('settings.cfg', 'w')
            file2.writelines("/mnt/")
            file2.close()
    else:
        file3 = open('settings.cfg', 'w')
        file3.writelines("/mnt/")
        file3.close()

def help2():
    print("usage: swapapp.py")
    print(" -h,--help                   give this help list")
    print(" --gui                       open gui version")
    print("")
    print("usage: swapapp.py list [options]")
    print(" -i,--include                include folder to search")
    print("")
    print("usage: swapapp.py create [options] swapfile")
    print(" -tp,--temporary-permanent   (0=temporary,1=permanent)(default 1)specify temporary(until reboot) or permenant")
    print(" -s,--size                   (required)specify size in mb of swapfile")
    print(" -p,--priority               (default=auto)specify priority for swapfile")
    print("")
    print("usage: swapapp.py edit [options] swapfile")
    print(" -c,--change                 change swap filename")
    print(" -tp,--temporary-permanent   (0=temporary,1=permanent)specify temporary(until reboot) or permenant")
    print(" -s,--size                   specify size in mb of swapfile")
    print(" -p,--priority               specify priority for swapfile")
    print("")
    print("usage: swapapp.py delete swapfile")
    print("")
    print("usage: swapapp.py disable swapfile")
    print("")
    print("usage: swapapp.py enable [options] swapfile")
    print(" -p,--priority               set temporary priority(Until Reboot)")

def gui():
    global prefix
    prefix = "/mnt/"
    checkingconfig()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("SwapApp")
    MainWindow.show()
    sys.exit(app.exec_())

def consoler():
    global stop
    global kill
    if(len(sys.argv) == 1):
        gui()
    else:
        if(sys.argv[1] == "--gui"):
            gui()
        if(sys.argv[1] == "-h" or sys.argv[1] == "--help"):
            help2()
        elif(sys.argv[1] == "list"):
            if(len(sys.argv) > 2):
                if(sys.argv[2].startswith("-i=") or sys.argv[2].startswith("--include=")):
                    if(len(sys.argv) > 3):
                        print("Too many arguements for list")
                        help2()
                        exit()
                elif(sys.argv[2].startswith("-i") or sys.argv[2].startswith("--include")):
                    if(len(sys.argv) > 4):
                        print("Too many arguements for list")
                        help2()
                        exit()
                else:
                    print("Wrong Arguements for list")
                    help2()
                    exit()
            objects = []
            numering = 0
            result = subprocess.run(['swapon', '--noheadings'], stdout=subprocess.PIPE)
            gr = str(result.stdout.decode('utf-8'))
            grrr = gr.split("\n")
            grr = []
            for i in range(0,len(grrr)):
                grr.append(grrr[i].split(" "))
            qwe = []
            for grrrf in grr:
                for grrrff in grrrf:
                    if(grrrff.strip() != ""):
                        qwe.append(grrrff.strip())
            i = 0
            for ii in range(0,len(qwe)):
                i += 1
                if(i == 6):
                    i = 1
                if(i == 5):
                    objects.append(qwe[ii-4])
                    if(numering == 0):
                        print("        filename        size        priority")
                    numering += 1
                    print(str(numering)+")      "+qwe[ii-4]+"        "+qwe[ii-2]+"        "+qwe[ii])
            ff = open("/etc/fstab","r")
            fstab = Fstab().read_file(ff)
            for entry in fstab.entries_by_type["swap"]:
                if(str(entry.device) not in objects):
                    sizeq = os.stat(str(entry.device)).st_size / (1024 * 1024)
                    numering += 1
                    print(str(numering)+")      "+str(entry.device)+"        "+str(sizeq)+"M        Null")
            ff.close()
            if(len(sys.argv) == 3 or len(sys.argv) == 4) and (sys.argv[2].startswith("-i") or sys.argv[2].startswith("--include")):
                if(sys.argv[2].startswith("-i=") or sys.argv[2].startswith("--include=")):
                    if(sys.argv[2].startswith("-i=")):
                        sysname = sys.argv[2][3:len(sys.argv[2])]
                    elif(sys.argv[2].startswith("--include=")):
                        sysname = sys.argv[2][10:len(sys.argv[2])]
                    refreshprefixer = os.listdir(sysname)
                    for refreshprefixerr in refreshprefixer:
                        if(refreshprefixerr not in objects):
                            if(os.path.isfile(refreshprefixerr)):
                                try:
                                    f = open(refreshprefixerr,"r")
                                    f.seek(4086)
                                    q = f.read(9)
                                    if(q.strip() == "SWAPSPACE"):
                                        sizeq = os.stat(refreshprefixerr).st_size / (1024 * 1024)
                                        numering += 1
                                        print(str(numering)+")      "+str(refreshprefixerr)+"        "+str(sizeq)+"M        Null")
                                    f.close()
                                except Exception as err:
                                    non = 0
                elif(sys.argv[2].startswith("-i") or sys.argv[2].startswith("--include")):
                    sysname = sys.argv[3]
                    refreshprefixer = os.listdir(sysname)
                    for refreshprefixerr in refreshprefixer:
                        if(refreshprefixerr not in objects):
                            if(os.path.isfile(refreshprefixerr)):
                                try:
                                    f = open(refreshprefixerr,"r")
                                    f.seek(4086)
                                    q = f.read(9)
                                    if(q.strip() == "SWAPSPACE"):
                                        sizeq = os.stat(refreshprefixerr).st_size / (1024 * 1024)
                                        numering += 1
                                        print(str(numering)+")      "+str(refreshprefixerr)+"        "+str(sizeq)+"M        Null")
                                    f.close()
                                except Exception as err:
                                    non = 0
                else:
                    print("Wrong Arguements for list")
                    help2()
                    exit()
            exit()
        elif(sys.argv[1] == "create"):
            everytwo = 1
            one = 0
            oneref = 0
            onevalue = ""
            two = 0
            tworef = 0
            twovalue = ""
            three = 0
            threeref = 0
            threevalue = ""
            namevalue = ""
            for i in range(0,len(sys.argv)):
                if(i>1):
                    everytwo += 1
                if(sys.argv[i].startswith("-tp=")):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            everytwo = 1
                            onevalue = str(sys.argv[i][4:len(sys.argv[i])])
                elif(sys.argv[i] == "-tp"):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            onevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--temporary-permanent=")):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            everytwo = 1
                            onevalue = str(sys.argv[i][22:len(sys.argv[i])])
                elif(sys.argv[i] == "--temporary-permanent"):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            onevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("-s=")):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            everytwo = 1
                            twovalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "-s"):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            twovalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--size=")):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            everytwo = 1
                            twovalue = str(sys.argv[i][7:len(sys.argv[i])])
                elif(sys.argv[i] == "--size"):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            twovalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("-p=")):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            everytwo = 1
                            threevalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "-p"):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            threevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--priority=")):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            everytwo = 1
                            threevalue = str(sys.argv[i][11:len(sys.argv[i])])
                elif(sys.argv[i] == "--priority"):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            threevalue = str(sys.argv[i+1])
                elif(i>1 and everytwo%2 == 0 and i == len(sys.argv)-1):
                    namevalue = sys.argv[i]
                elif(i>1 and everytwo%2 == 0):
                    help2()
                    exit()
            if(one == 1 and two == 1 and three == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and two == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and three == 1):
                print("size is required")
                help2()
                exit()
            elif(two == 1 and three == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(two == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                os.system('echo '+name+' none swap sw 0 0 >> /etc/fstab')
                stop = True
                exit()
        elif(sys.argv[1] == "delete"):
            if(len(sys.argv) != 3):
                help2()
                exit()
            kill = False
            stop = False
            p = progress_bar_loading()
            p.start()
            name = sys.argv[2]
            subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
            subprocess.run(['rm', name], stdout=subprocess.PIPE)
            subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
            os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
            stop = True
            exit()
        elif(sys.argv[1] == "disable"):
            if(len(sys.argv) != 3):
                help2()
                exit()
            name = sys.argv[2]
            subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
        elif(sys.argv[1] == "enable"):
            if(len(sys.argv) != 3):
                help2()
                exit()
            name = sys.argv[2]
            subprocess.run(['swapon', name], stdout=subprocess.PIPE)
        elif(sys.argv[1] == "edit"):
            everytwo = 1
            one = 0
            oneref = 0
            onevalue = ""
            two = 0
            tworef = 0
            twovalue = ""
            three = 0
            threeref = 0
            threevalue = ""
            four = 0
            fourref = 0
            fourvalue = ""
            namevalue = ""
            for i in range(0,len(sys.argv)):
                if(i>1):
                    everytwo += 1
                if(sys.argv[i].startswith("-tp=")):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            everytwo = 1
                            onevalue = str(sys.argv[i][4:len(sys.argv[i])])
                elif(sys.argv[i] == "-tp"):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            onevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--temporary-permanent=")):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            everytwo = 1
                            onevalue = str(sys.argv[i][22:len(sys.argv[i])])
                elif(sys.argv[i] == "--temporary-permanent"):
                    if(one == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            one = 1
                            oneref = i
                            onevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("-s=")):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            everytwo = 1
                            twovalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "-s"):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            twovalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--size=")):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            everytwo = 1
                            twovalue = str(sys.argv[i][7:len(sys.argv[i])])
                elif(sys.argv[i] == "--size"):
                    if(two == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            two = 1
                            tworef = i
                            twovalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("-p=")):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            everytwo = 1
                            threevalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "-p"):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            threevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--priority=")):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            everytwo = 1
                            threevalue = str(sys.argv[i][11:len(sys.argv[i])])
                elif(sys.argv[i] == "--priority"):
                    if(three == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            three = 1
                            threeref = i
                            threevalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("-c=")):
                    if(four == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            four = 1
                            fourref = i
                            everytwo = 1
                            fourvalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "-c"):
                    if(four == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            four = 1
                            fourref = i
                            fourvalue = str(sys.argv[i+1])
                elif(sys.argv[i].startswith("--change=")):
                    if(four == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            four = 1
                            fourref = i
                            everytwo = 1
                            fourvalue = str(sys.argv[i][3:len(sys.argv[i])])
                elif(sys.argv[i] == "--change"):
                    if(four == 1):
                        help2()
                        exit()
                    else:
                        if(everytwo%2 == 0):
                            four = 1
                            fourref = i
                            fourvalue = str(sys.argv[i+1])
                elif(i>1 and everytwo%2 == 0 and i == len(sys.argv)-1):
                    namevalue = sys.argv[i]
                elif(i>1 and everytwo%2 == 0):
                    help2()
                    exit()
            if(one == 1 and two == 1 and three == 1 and four == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                    os.system('echo '+fourvalue+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and two == 1 and three == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and two == 1 and four == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                    os.system('echo '+fourvalue+' none swap sw 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and three == 1 and four == 1):
                name = namevalue
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                    os.system('echo '+fourvalue+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(two == 1 and three == 1 and four == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                os.system("mv "+name+" "+fourvalue)
                subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                os.system('echo '+fourvalue+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(one == 1 and two == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and three == 1):
                name = namevalue
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(one == 1 and four == 1):
                name = namevalue
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                    os.system('echo '+fourvalue+' none swap sw 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    os.system("mv "+name+" "+fourvalue)
                    subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(two == 1 and three == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(two == 1 and four == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                os.system("mv "+name+" "+fourvalue)
                subprocess.run(['dd', 'if=/dev/zero', 'of='+fourvalue, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                os.system('echo '+fourvalue+' none swap sw 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(three == 1 and four == 1):
                name = namevalue
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                os.system("mv "+name+" "+fourvalue)
                subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['swapon', '-p', threevalue, fourvalue], stdout=subprocess.PIPE)
                os.system('echo '+fourvalue+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(one == 1):
                name = namevalue
                try:
                    tempone = int(onevalue)
                    if not (tempone == 1 or tempone == 0):
                        print("-tp value is wrong")
                        help2()
                        exit()
                except Exception as err:
                    print("-tp value is wrong")
                    help2()
                    exit()
                tempone = int(onevalue)
                if(tempone == 1):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    os.system('echo '+name+' none swap sw 0 0 >> /etc/fstab')
                    stop = True
                    exit()
                elif(tempone == 0):
                    kill = False
                    stop = False
                    p = progress_bar_loading()
                    p.start()
                    subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                    subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                    os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                    subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                    subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                    subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                    subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                    stop = True
                    exit()
            elif(two == 1):
                name = namevalue
                try:
                    size = 1024 * int(twovalue)
                except Exception as err:
                    print("size value error")
                    help2()
                    exit()
                if(name[0:name.rfind("/")+1] == -1):
                    tempq = os.statvfs(os.getcwd())
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                else:
                    tempq = os.statvfs(name[0:name.rfind("/")+1])
                    tempw = ((tempq.f_frsize * tempq.f_bavail)/1024)/1024
                    if(float(tempw) < float(twovalue)):
                        print("not enough space")
                        exit()
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                subprocess.run(['dd', 'if=/dev/zero', 'of='+name, 'bs=1024', 'count='+str(size)], stdout=subprocess.PIPE)
                subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                subprocess.run(['swapon', name], stdout=subprocess.PIPE)
                os.system('echo '+name+' none swap sw 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(three == 1):
                name = namevalue
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                subprocess.run(['chown', 'root:root', name], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', name], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', name], stdout=subprocess.PIPE)
                subprocess.run(['swapon', '-p', threevalue, name], stdout=subprocess.PIPE)
                os.system('echo '+name+' none swap sw,pri='+threevalue+' 0 0 >> /etc/fstab')
                stop = True
                exit()
            elif(four == 1):
                name = namevalue
                kill = False
                stop = False
                p = progress_bar_loading()
                p.start()
                subprocess.run(['swapoff', name], stdout=subprocess.PIPE)
                subprocess.run(['cp', '/etc/fstab', '/etc/fstab.bak'], stdout=subprocess.PIPE)
                os.system('sed -i '+"'/"+name.replace("/","\/")+"/d'"+' /etc/fstab')
                os.system("mv "+name+" "+fourvalue)
                subprocess.run(['chown', 'root:root', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['chmod', '0600', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['mkswap', fourvalue], stdout=subprocess.PIPE)
                subprocess.run(['swapon', fourvalue], stdout=subprocess.PIPE)
                os.system('echo '+fourvalue+' none swap sw 0 0 >> /etc/fstab')
                stop = True
                exit()
        else:
            help2()


if __name__ == "__main__":
    consoler()
